#!/usr/bin/env bash
# This script was generated by bashly (https://github.com/DannyBen/bashly)
# Modifying it manually is not recommended

# :command.root_command
root_command() {
  # :src/root_command.sh
  _SOURCE_DIR=$(realpath ${args[source]})
  _TARGET_DIR=$(realpath ${args[target]})
  _SOURCE_DIR_NAME=$(basename $_SOURCE_DIR)
  
  
  echo "$(blue Mounting ) $(yellow $_TARGET_DIR)"
  sudo mount -t tmpfs -o size=${args[--size]}G,nodev,nosuid,nodiratime tmpfs $_TARGET_DIR
  
  _TARGET_DIR_LEN=$(echo "$_TARGET_DIR/$_SOURCE_DIR_NAME" | wc -c)
  _TARGET_DIR_LEN=$((_TARGET_DIR_LEN+1))
  
  echo $(yellow "$_TARGET_DIR/$_SOURCE_DIR_NAME")
  
  cp -ra $_SOURCE_DIR $_TARGET_DIR
  
  inotifywait -mr --timefmt '%d/%m/%y %H:%M' --format '%T %w %f' \
    -e close_write $_TARGET_DIR |
  while read -r date time dir file; do
      _MOD_PATH=$(realpath "$dir$file")
      _SRC_PATH="$_SOURCE_DIR/$(echo $_MOD_PATH | cut -c$_TARGET_DIR_LEN-)"
      _TIME_STMAP=${date}-${time}
  
      echo -en "$_TIME_STMAP: $(yellow $_MOD_PATH) \U1F872 $(magenta $_SRC_PATH) "
      $(cp $_MOD_PATH $_SRC_PATH &> /dev/null) && echo "$(green_bold OK)" || echo "$(red_bold ERROR)"
  
  done
}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
ramfolder_usage() {
  if [[ -n $long_usage ]]; then
    printf "ramfolder - Create a RAM disk and synchronize a folder into it.\n"
    echo 
  else
    printf "ramfolder - Create a RAM disk and synchronize a folder into it.\n"
    echo 
  fi

  printf "Usage:\n"
  printf "  ramfolder SOURCE TARGET [options]\n"
  printf "  ramfolder --help | -h\n"
  printf "  ramfolder --version | -v\n"
  echo

  if [[ -n $long_usage ]]; then
    printf "Options:\n"
    # :command.usage_fixed_flags
    echo "  --help, -h"
    printf "    Show this help\n"
    echo
    echo "  --version, -v"
    printf "    Show version number\n"
    echo
    # :command.usage_flags
    # :flag.usage
    echo "  --size, -s"
    printf "    Size of the RAM disk in gigabytes.\n"
    printf "    Default: 10\n"
    echo
    # :command.usage_args
    printf "Arguments:\n"
    
    # :argument.usage
    echo "  SOURCE"
    printf "    Source directory containing the files.\n"
    echo
    
    # :argument.usage
    echo "  TARGET"
    printf "    Path where the RAM disk should be created.\n"
    echo

    # :command.usage_examples
    printf "Examples:\n"
    
    printf "  ramfolder /var/www/magento2/ /mnt/ramdisk/\n"
    echo

  fi
}

# :command.inspect_args
inspect_args() {
  readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
  if (( ${#args[@]} )); then
    echo args:
    for k in "${sorted_keys[@]}"; do echo "- \${args[$k]} = ${args[$k]}"; done
  else
    echo args: none
  fi

  if (( ${#other_args[@]} )); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi
}

# :command.user_lib
# :src/lib/colors.sh
# ---
# Color functions
# This file is a part of Bashly standard library
#
# Usage:
# Use any of the functions below to color or format a portion of a string.
# 
#   echo "before $(red this is red) after"
#   echo "before $(green_bold this is green_bold) after"
#
# ---

red() { printf "\e[31m%b\e[0m\n" "$*"; }
green() { printf "\e[32m%b\e[0m\n" "$*"; }
yellow() { printf "\e[33m%b\e[0m\n" "$*"; }
blue() { printf "\e[34m%b\e[0m\n" "$*"; }
magenta() { printf "\e[35m%b\e[0m\n" "$*"; }
cyan() { printf "\e[36m%b\e[0m\n" "$*"; }
bold() { printf "\e[1m%b\e[0m\n" "$*"; }
underlined() { printf "\e[4m%b\e[0m\n" "$*"; }
red_bold() { printf "\e[1;31m%b\e[0m\n" "$*"; }
green_bold() { printf "\e[1;32m%b\e[0m\n" "$*"; }
yellow_bold() { printf "\e[1;33m%b\e[0m\n" "$*"; }
blue_bold() { printf "\e[1;34m%b\e[0m\n" "$*"; }
magenta_bold() { printf "\e[1;35m%b\e[0m\n" "$*"; }
cyan_bold() { printf "\e[1;36m%b\e[0m\n" "$*"; }
red_underlined() { printf "\e[4;31m%b\e[0m\n" "$*"; }
green_underlined() { printf "\e[4;32m%b\e[0m\n" "$*"; }
yellow_underlined() { printf "\e[4;33m%b\e[0m\n" "$*"; }
blue_underlined() { printf "\e[4;34m%b\e[0m\n" "$*"; }
magenta_underlined() { printf "\e[4;35m%b\e[0m\n" "$*"; }
cyan_underlined() { printf "\e[4;36m%b\e[0m\n" "$*"; }

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flag_filter
  case "$1" in
  --version | -v )
    version_command
    exit
    ;;
  
  --help | -h )
    long_usage=yes
    ramfolder_usage
    exit 1
    ;;
  
  esac
  # :command.environment_variables_filter
  # :command.dependencies_filter
  # :command.command_filter
  action="root"
  # :command.required_args_filter
  if [[ $1 && $1 != -* ]]; then
    args[source]=$1
    shift
  else
    printf "missing required argument: SOURCE\nusage: ramfolder SOURCE TARGET [options]\n"
    exit 1
  fi
  
  if [[ $1 && $1 != -* ]]; then
    args[target]=$1
    shift
  else
    printf "missing required argument: TARGET\nusage: ramfolder SOURCE TARGET [options]\n"
    exit 1
  fi
  # :command.required_flags_filter
  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
    # :flag.case
    --size | -s )
      args[--size]=1
      shift
      ;;
  
  
    -* )
      printf "invalid option: %s\n" "$key"
      exit 1
      ;;
  
    * )
      # :command.parse_requirements_case
      if [[ ! ${args[source]} ]]; then
        args[source]=$1
        shift
      elif [[ ! ${args[target]} ]]; then
        args[target]=$1
        shift
      else
        printf "invalid argument: %s\n" "$key"
        exit 1
      fi
      ;;
  
    esac
  done
  # :command.default_assignments
  [[ -n ${args[--size]} ]] || args[--size]="10"
  # :command.whitelist_filter
}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e  

  # :src/initialize.sh
  # Code here runs inside the initialize() function
  # Use it for anything that you need to run before any other function, like
  # setting environment vairables:
  # CONFIG_FILE=settings.ini
  #
  # Feel free to empty (but not delete) this file.
}

# :command.run
run() {
  declare -A args
  declare -a other_args
  parse_requirements "$@"

  if [[ $action == "root" ]]; then
    root_command
  fi
}

initialize
run "$@"
